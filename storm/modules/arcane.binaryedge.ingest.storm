init {
    $api = $lib.import(arcane.binaryedge.api)
    $srcnode = $lib.null
}

function init_meta_source() {
    if ($srcnode = $lib.null) {
        if ($lib.debug) {
            $lib.print(
                "[arcane::binaryedge::ingest::init_meta_source] Setting meta:source={source}",
                source=$modconf.source
            )
        }
        [ meta:source=$modconf.source :name="arcane-binaryedge" ]
        $srcnode = $node
    }
    fini { return($lib.null) }
}

function get_user_subscription() {

    if $lib.debug {
        $lib.print("[arcane::binaryedge::ingest::get_user_subscription]")
    }

    $user_api_resp = $api.get_user_subscription()
    if ($user_api_resp != $lib.null) {
        $lib.pprint($user_api_resp)
    }

    fini{ return($lib.null) }
}

function add_scanner(origin) {

    if $lib.debug {
        $lib.print("[arcane::binaryedge::ingest::add_scanner]")
    }
    if ($origin.module != $lib.null) {
        $tag = `cno.scanner.binaryedge.{$origin.module}`
    }
    // TODO: Use type and not module?
    else {
        $tag = 'cno.scanner.binaryedge'
    }

    [
        inet:ipv4=$origin.ip
        :loc?=$origin.country
        .seen=$origin.ts
        +#$tag
    ]
    [ <(seen)+ { yield $srcnode } ]

    fini{return($lib.null)}
}

// inet:flow generator
function create_inet_flow(result, extra_data=$lib.null) {

    if $lib.debug {
        $lib.print("[arcane::binaryedge::ingest::create_inet_flow]")
    }

    $guid = $lib.guid(
        (
            "arcane-binaryedge",
            $extra_data,
            $result.origin.type,
            //$result.origin.ip,
            //$result.origin.port,
            $result.origin.ts,
            $result.target.ip,
            $result.target.port,
            $result.target.protocol,
        )
    )

    $inet_server = $lib.str.format(
        "{protocol}://{dstip}:{dstport}",
        protocol=$result.target.protocol,
        dstip=$result.target.ip,
        dstport=$result.target.port
    )

    [
        inet:flow=$guid
        :time=$result.origin.ts
        :dst=$inet_server
        :dst:proto=$result.target.protocol
    ]

    // if $lib.debug {
    //     $lib.print("[arcane::binaryedge::ingest::create_inet_flow] flow node created")
    //     $lib.print(`node: {$node}`)
    // }
    //:src:ipv4=$result.origin.ip

    /*if $result.origin.port {
        $inet_client = $lib.str.format(
            "{protocol}://{srcip}:{srcport}",
            protocol=$result.target.protocol,
            srcip=$result.origin.ip,
            srcport=$result.origin.port
        )
        [:src=$inet_client]
    }*/

    switch $result.target.protocol {
        "tcp": {
            [:ip:proto=6]
        }
        "udp": {
            [:ip:proto=17]
        }
        "icmp": {
            [:ip:proto=1]
        }
        *: {
            $lib.warn(`arcane::binaryedge::ingest::] Unhandled IP protocol: {$result.target.protocol}`)
        }
    }
    [ <(seen)+ { yield $srcnode } ]
}

function add_inet_flow(result) {

    if $lib.debug {
        $lib.print('[arcane::binaryedge::ingest::add_inet_flow]')
    }
    /*
        âžœ jq -r '.events[].results[].origin.type' query_ip_target_response.json | sort | uniq
        jarm
        service-simple
        ssh
        ssl-simple
        webv2

        WARNING: Unhandled service type: bluekeep
        WARNING: Target IP: 45.138.16.231
        WARNING: Unhandled service type: ftp
        WARNING: Target IP: 107.189.7.144
        WARNING: Unhandled service type: service
        WARNING: Target IP: 154.47.20.180
        WARNING: Unhandled service type: bluekeep
        WARNING: Target IP: 45.138.16.231
    */
    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::add_inet_flow] {$result.origin.type}`)
    }
    switch $result.origin.type {
        "port": {} // ignored
        "service": {
            yield $create_inet_flow($result)

            $service = $result.result.data.service
            [:dst:handshake?=$service.banner]
            if ($service.probe != "") {[ :src:handshake?=$service.probe]}
            if $service.cpe {[:dst:cpes?=$service.cpe]}

            $softnames = $lib.list($service.product)
            if $service.ostype {$softnames.append($service.ostype)}
            if $service.extrainfo {$softnames.append($service.extrainfo)}
            [:dst:softnames?=$softnames]

            $tag = $lib.str.format(
                "rep.binaryedge.{name}",
                name=$service.name
            )
            [+#$tag]
        }
        "service-simple": {
            yield $create_inet_flow($result)

            $service = $result.result.data.service
            [:dst:handshake?=$service.banner]
            if ($service.probe != "") {[ :src:handshake?=$service.probe]}
            if $service.cpe {[:dst:cpes?=$service.cpe]}

            $softnames = $lib.list($service.product)
            if $service.ostype {$softnames.append($service.ostype)}
            if $service.extrainfo {$softnames.append($service.extrainfo)}
            [:dst:softnames?=$softnames]

            $tag = $lib.str.format(
                "rep.binaryedge.{name}",
                name=$service.name
            )
            [+#$tag]
        }
        "ssl-simple": {
            yield $create_inet_flow($result)

            $cert = $add_ssl_certs($result)
            // Leaf certificate was returned.
            if ($cert != $lib.null) {
                [:dst:ssl:cert=$cert]
            }
        }
        "ssh": {
            for $cypher in $result.result.data.cyphers {
                yield $create_inet_flow($result, $cypher)

                if $result.result.data.banner {
                    [:dst:handshake?=$result.result.data.banner]
                }

                [
                    :dst:ssh:key={[
                        crypto:key=($cypher.key, $cypher.cypher)
                        :public=$lib.hex.encode($lib.base64.decode($cypher.key))
                        :algorithm=$cypher.cypher
                        :public:md5=$cypher.fingerprint.replace(':', '')
                    ]}
                ]
            }
        }
        "webv2": {
            yield $create_inet_flow($result)

            // TODO: Better error handling. This check was brought
            // around from BEdge not having a response but would contain
            // an "error" key to indicate why it failed.
            // "error": "ConnectTimeout on url http://209.141.58.72:8080/"
            if $result.result.data.response {{
                $add_http_request(
                    $result.result.data,
                    $result.origin.ts,
                    $node
                )
            }}
        }
        "jarm": {
            // Do I want to edge this back to a flow? Would I loose
            // anything by not having it edged back to a flow? Can I
            // have a jarm object in the API response and not also have
            // another "thing" that would create a flow which records
            // the target IP had port X open?
            $add_jarm($result)
        }
        "smb": {
            yield $create_inet_flow($result)

            if ($result.result.data.shares != $lib.null) {
                $lib.warn(`Unhandled SMB shares for {$result.target.ip}`)
                $lib.print($result.result.data.shares)
            }

            $data = $result.result.data

            if $data.cpe {[:dst:cpes?=$data.cpe]}

            $softnames = $lib.list($data.potential_os)
            [:dst:softnames?=$softnames]

            [+#rep.binaryedge.smb]
        }
        "rdp": {
            // TODO: Download JPEG with RDP screenshot and save into the
            // quarry.
            yield $create_inet_flow($result)
            [+#rep.binaryedge.rdp]
        }
        "bluekeep": {
            // TODO: Download JPEG with RDP screenshot and save into the
            // quarry.
            yield $create_inet_flow($result)
            [+#rep.binaryedge.rdp]

            if ($result.result.data.status != "SAFE") {
                $t=`rep.binaryedge.rdp.bluekeep_{$result.result.data.status}`
                [+#$t]
            }
        }
        "ftp": {
            // TODO: Download JPEG with RDP screenshot and save into the
            // quarry.
            yield $create_inet_flow($result)
            [+#rep.binaryedge.ftp]
            if ($result.result.data != $lib.null) {
                $lib.warn(`Unhandled FTP data for {$result.target.ip}`)
                $lib.print(`{$result.result}`)
            }
        }
        *: {
            $lib.warn(`Unhandled service type: {$result.origin.type}`)
            $lib.warn(`Target IP: {$result.target.ip}`)
        }
    }
}

// https://docs.binaryedge.io/modules/ssl-simple/
// "certificate_chain - the certificate chain sent by the server; index
// 0 is the leaf certificate"
function add_ssl_certs(result) {

    if $lib.debug {
        $lib.print('[arcane::binaryedge::ingest::add_ssl_certs]')
    }
    $cert_info = $result.result.data.cert_info
    $leaf = $lib.null

    // Start top down.
    $cert_chain = $lib.list()
    $cert_chain.extend($cert_info.certificate_chain)
    $cert_chain.reverse()

    for $cert in $cert_chain {
        $leaf = $add_ssl_cert($cert)
    }

    return($leaf)
}

function add_ssl_cert(cert) {

    if $lib.debug {
        $lib.print('[arcane::binaryedge::ingest::add_ssl_cert]')
        $lib.pprint($cert)
    }
    // TODO: Do I want to end up with duplicate certificates?
    // How do I create the certificate consistent with the output of
    // certificate representations of other APIs?

    // WARNING: HAX
    $fqdns = $lib.list()
    $cert_dict = $cert.as_dict
    $public_key_info = $cert_dict.public_key_info

    $sha256_fp = $cert.sha256_fingerprint.replace(':', '')
    $serial_number = $cert_dict.serial_number

    $guid = $lib.guid("arcane-binaryedge", $public_key_info, $serial_number)

    $subject_dn = $normalise_ssl_cert_dn($cert_dict.subject.distinguished_name)
    $issuer_dn = $normalise_ssl_cert_dn($cert_dict.issuer.distinguished_name)

    [
        crypto:x509:cert=$guid
        :subject=$subject_dn
        :issuer=$issuer_dn
        :serial=$lib.hex.fromint($serial_number, 20)
        :validity:notbefore=$cert_dict.validity.not_before
        :validity:notafter=$cert_dict.validity.not_after
        :version=$cert_dict.version
        :selfsigned=$cert_dict.self_signed
        :sha256=$sha256_fp
        :sha1=$cert.sha1_fingerprint.replace(':', '')
    ]
    [ <(seen)+ { yield $srcnode } ]

    if $public_key_info.modulus {
        $modulus = $public_key_info.modulus.replace(':', '')
        [:rsa:key=($modulus, $public_key_info.exponent)]
    }

    if $cert_dict.subject.common_name {
        ($ok, $fqdn) = $lib.trycast(inet:fqdn, $cert_dict.subject.common_name)
        if $ok {
            $fqdns.append($fqdn)
        }
    }

    if $cert_dict.extensions {
        if $cert_dict.extensions.subject_alt_name {
            $sans = $lib.list()
            for $san in $cert_dict.extensions.subject_alt_name {
                // DANGER - Assuming always DNS is bad, M'Kay!
                // Model internal certs where I have with IP: SANS
                $sans.append(('dns', $san))
                ($ok, $url) = $lib.trycast(inet:fqdn, $san)
                if $ok {
                    $fqdns.append($san)
                }
            }
            [:ext:sans=$sans]
        }
    }

    [:identities:fqdns=$fqdns]

    return($node)
}

// Dear X.500 Lord, please forgive me.
function normalise_ssl_cert_dn(dn) {

    if $lib.debug {
        $lib.print('[arcane::binaryedge::ingest::normalise_ssl_cert_dn]')
        $lib.pprint($dn)
    }
    $parts = $dn.split(';')
    // BE seem to display these in reverse order to what OpenSSL
    // presents. Tut tut.
    $parts.reverse()

    $i=0
    for $p in $parts {
        $vals = $p.strip().split(':')

        $j=0
        for $v in $vals {
            $vals.$j = $v.lstrip()
            $j=($j+1)
        }

        // âžœ openssl x509 -subject -issuer -noout -in 1.crt
        // subject= /C=IE/ST=Leinster/L=Dublin/O=Konundrum/OU=WWW/CN=konundrum.org/emailAddress=webmaster@konundrum.org
        // issuer= /C=IE/ST=Leinster/L=Dublin/O=Konundrum/OU=WWW/CN=konundrum.org/emailAddress=webmaster@konundrum.org

        switch $vals.0 {
            "Common Name": {
                $vals.0 = "/CN"
            }
            "Organization": {
                $vals.0 = "/O"
            }
            "Country": {
                $vals.0 = "/C"
            }
            "Organizational Unit": {
                $vals.0 = "/OU"
            }
            "Locality": {
                $vals.0 = "/L"
            }
            "Email Address": {
                $vals.0 = "/emailAddress"
            }
            "State/Province": {
                $vals.0 = "/ST"
            }
            *: {
                $lib.warn("Unhandled field: {field}", field=$vals.0)
            }
        }

        $parts.$i = $lib.str.join("=", $vals)
        $i=($i+1)
    }

    $norm = $lib.str.join('', $parts)

    return($norm)
}

function query_ip_target(n, asof, historical=$lib.false) {

    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::query_ip_target] arg node {$n}`)
        $lib.print(`[arcane::binaryedge::ingest::query_ip_target] asof: {$asof}`)
        $lib.print(`[arcane::binaryedge::ingest::query_ip_target] historical {$historical}`)
    }

    $target = $n.repr()

    $api_resp = $api.query_ip_target($target, $asof, $historical)
    if ($api_resp = $lib.null) {yield $lib.null}

    $events = $api_resp.events

    for $evt in $events {
        if ($historical = $lib.true) {
            yield $add_inet_flow($evt)
        }
        else {
            for $res in $evt.results {
                $add_scanner($res.origin)
                yield $add_inet_flow($res)
            }
        }
    }
    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::query_ip_target] Yielding {$node}`)
    }
}

function add_http_request(http_data,
                         ts=$lib.null,
                         inet_flow=$lib.null)
{

    if $lib.debug {
        $lib.print("[arcane::binaryedge::ingest::add_http_request]")
    }

    $req = $http_data.request
    $resp = $http_data.response

    $guid = $lib.guid(
        $req.method,
        $req.url,
        $resp.status.code,
        $resp.body.sha256_hash,
        $inet_flow.repr()              // TODO: Rethink this.
    )

    $req_hdrs = $lib.list()
    for ($k, $v) in $req.headers {
        $req_hdrs.append(($k, $v))
    }

    $resp_hdrs = $lib.list()
    for ($k, $v) in $resp.headers.headers {
        $resp_hdrs.append(($k, $v))
    }

    // TODO: Keep checking for cookies. I like cookies.

    if $resp.redirects {
        // TODO: Create HTTP reqeust.
        for $redir in $resp.redirects {
            if $lib.debug {
                $lib.print(`[arcane::binaryedge::ingest::add_http_request] {$redir}`)
            }
            ($ok, $url) = $lib.trycast(inet:url, $redir.redirect_uri)
            if $ok {
                [
                    inet:urlredir=($url, $redir.headers.Location)
                ] | spin
            }
        }
    }

    try {
        [
            inet:http:request=$guid
            :method=$req.method
            :url=$req.url
            :path=$req.path
            :headers=$req_hdrs
            :response:headers=$resp_hdrs
            :server=$inet_flow.props.dst
            :response:code=$resp.status.code
            :response:body=$resp.body.sha256_hash
            :time=$ts
            :flow=$inet_flow.repr()
        ]
    }
    catch BadTypeValu as err {
        $lib.warn(`[arcane::binaryedge::ingest::add_http_request] Unexpected error {$err}`)
        $lib.print($http_data)
        $lib.print(`{$inet_flow}`)
        $lib.exit("[arcane::binaryedge::ingest::add_http_request] Bailing")
    }

    if $resp.headers.header_order_md5_hash {
        [ +(refs)>
            {[hash:md5=$resp.headers.header_order_md5_hash
             +#rep.binaryedge.header_order_md5_hash
            ]}
        ]
    }
    [ <(seen)+ { yield $srcnode } ]

    return($lib.null)
}

function add_jarm(result) {
    if $lib.debug {
        $lib.print("[arcane::binaryedge::ingest::add_jarm]")
    }

    $inet_server = $lib.str.format(
        "{protocol}://{dstip}:{dstport}",
        protocol=$result.target.protocol,
        dstip=$result.target.ip,
        dstport=$result.target.port
    )
    $jarmhash = $result.result.data.jarm_hash

    [inet:ssl:jarmsample=($inet_server, $jarmhash)]
    [<(seen)+ {yield $srcnode}]

    return($lib.null)
}

function query_domains_subdomains(fqdn, asof) {

    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::query_domains_subdomains] arg node {$fqdn}`)
        $lib.print(`[arcane::binaryedge::ingest::query_domains_subdomains] asof: {$asof}`)
    }

    // API response doesn't tell us we have a next page. Gotta figure it
    // out for ourselves.
    $has_next = $lib.true
    $current_page = 1

    while ($has_next)
    {
        // query
        $api_resp = $api.query_domains_subdomains($fqdn.repr(), $asof, $current_page)
        if ($api_resp = $lib.null) { yield $lib.null }

        // ingest
        for $evt in $api_resp.events {
            [inet:fqdn=$evt]
            [ <(seen)+ { yield $srcnode } ]
            yield $node
        }

        // Get total number of pages.
        if ($api_resp.total > $api_resp.pagesize) {
            $num_pages = (($api_resp.total / $api_resp.pagesize)+1)
            if ($num_pages > 500) {$num_pages=500}

            $current_page = ($current_page+1)
            if ($current_page > $num_pages) {
                $has_next = $lib.false
            }
        }
        else { $has_next = $lib.false }
    }

    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::query_domains_subdomains] Yielding {$node}`)
    }
}

function query_domains_dns(fqdn, asof) {

    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::query_domains_dns] arg node {$fqdn}`)
        $lib.print(`[arcane::binaryedge::ingest::query_domains_dns] asof: {$asof}`)
    }
    yield $_query_domains_pdns("dns", $fqdn.repr(), $asof)
}

function query_domains_ip(ipaddr, asof) {
    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::query_domains_ip] arg node {$ipaddr}`)
        $lib.print(`[arcane::binaryedge::ingest::query_domains_ip] asof: {$asof}`)
    }

    yield $_query_domains_pdns("ip", $ipaddr.repr(), $asof)
}

function _query_domains_pdns(endpoint, target, asof) {

    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::_query_domains_pdns] arg endpoint {$endpoint}`)
        $lib.print(`[arcane::binaryedge::ingest::_query_domains_pdns] arg target {$target}`)
        $lib.print(`[arcane::binaryedge::ingest::_query_domains_pdns] asof: {$asof}`)
    }

    // API response doesn't tell us we have a next page. Gotta figure it
    // out for ourselves.
    $has_next = $lib.true
    $current_page = 1

    while ($has_next)
    {
        // query
        switch $endpoint {
            "dns": {
                $api_resp = $api.query_domains_dns($target, $asof, $current_page)
                if ($api_resp = $lib.null) { yield $lib.null }
            }
            "ip": {
                $api_resp = $api.query_domains_ip($target, $asof, $current_page)
                if ($api_resp = $lib.null) { yield $lib.null }
            }
            "search": {
                $api_resp = $api.query_domains_search($target, $asof, $current_page)
                if ($api_resp = $lib.null) { yield $lib.null }
            }
        }

        // ingest
        if $lib.debug {
            if ($api_resp.events.size() = 0) {
                $lib.print(`[arcane::binaryedge::ingest::_query_domains_pdns] no results.`)
            }
        }
        for $evt in $api_resp.events {

            // "updated_at": "2022-06-02T08:59:17.221189"
            $updated = $lib.time.parse($evt.updated_at, '%Y-%m-%dT%H:%M:%S.%f')
            $rrname = $evt.domain
            // $lib.print(`{$evt}`)

            // Process each RRSet.
            for ($rrtype, $rdata) in $evt {
                switch $rrtype {
                    "updated_at": {} // Already dealt with.
                    "domain": {} // Already dealt with.
                    "title": {} // Ignored
                    "root": {} // Ignored.
                    "A": {
                        for $row in $rdata {
                            [inet:dns:a=($rrname, $row) .seen=($updated)]
                        }
                    }
                    "AAAA": {
                        for $row in $rdata {
                            [inet:dns:aaaa=($rrname, $row) .seen=($updated)]
                        }
                    }
                    "NS": {
                        for $row in $rdata {
                            [inet:dns:ns=($rrname, $row) .seen=($updated)]
                        }
                    }
                    "TXT": {
                        for $row in $rdata {
                            [inet:dns:txt=($rrname, $row) .seen=($updated)]
                        }
                    }
                    "MX": {
                        for $row in $rdata {
                            [inet:dns:mx=($rrname, $row) .seen=($updated)]
                        }
                    }
                    "CNAME": {
                        for $row in $rdata {
                            [inet:dns:cname=($rrname, $row) .seen=($updated)]
                        }
                    }
                    *: {
                        $lib.warn(`Unhandled DNS rrtype: {$rrtype}`)
                    }
                }
            }
        }

        // Get total number of pages.
        if ($api_resp.total > $api_resp.pagesize) {
            $num_pages = (($api_resp.total / $api_resp.pagesize)+1)
            if ($num_pages > 500) {$num_pages=500}

            $current_page = ($current_page+1)
            if ($current_page > $num_pages) {
                $has_next = $lib.false
            }
        }
        else { $has_next = $lib.false }
    }

    [ <(seen)+ { yield $srcnode } ]
    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::_query_domains_pdns] Yielding {$node}`)
    }
}

function query_domains_search(query, asof) {
    if $lib.debug {
        $lib.print(`[arcane::binaryedge::ingest::query_domains_search] arg query {$query}`)
        $lib.print(`[arcane::binaryedge::ingest::query_domains_search] asof: {$asof}`)
    }

    yield $_query_domains_pdns("search", $query, $asof)
}
